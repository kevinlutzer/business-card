
business_card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000c8  008000c8  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000915  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000305  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002be  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005db  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea ed       	ldi	r30, 0xDA	; 218
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 3c       	cpi	r26, 0xC8	; 200
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a8 ec       	ldi	r26, 0xC8	; 200
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 3c       	cpi	r26, 0xCD	; 205
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	70 d0       	rcall	.+224    	; 0x132 <main>
  52:	c1 c0       	rjmp	.+386    	; 0x1d6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_ZN11charliePlex6setLedEh>:
	Inputs: 
		number - the linear index of the led that will be turned on.
*/
void charliePlex::setLed(uint8_t number)
{
	PORTB = charlieOutput[number];
  56:	70 e0       	ldi	r23, 0x00	; 0
  58:	fb 01       	movw	r30, r22
  5a:	e0 56       	subi	r30, 0x60	; 96
  5c:	ff 4f       	sbci	r31, 0xFF	; 255
  5e:	80 81       	ld	r24, Z
  60:	88 bb       	out	0x18, r24	; 24
	DDRB = charlieDir[number];
  62:	fb 01       	movw	r30, r22
  64:	ec 54       	subi	r30, 0x4C	; 76
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	80 81       	ld	r24, Z
  6a:	87 bb       	out	0x17, r24	; 23
  6c:	08 95       	ret

0000006e <_ZN11charliePlex6ledOffEv>:
/*
	Turn off all LEDs within the matrix.
*/
void charliePlex::ledOff()
{
	DDRB = 0;
  6e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
  70:	18 ba       	out	0x18, r1	; 24
  72:	08 95       	ret

00000074 <_ZN11charliePlex10displayRowEPhh>:
	Inputs:
		image - a 4 element array containing binary values
		row - the row that image should be displayed in the matrix
*/
void charliePlex::displayRow( uint8_t image[], uint8_t row )
{
  74:	df 92       	push	r13
  76:	ef 92       	push	r14
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	7c 01       	movw	r14, r24
	for( uint8_t i = 0; i < 5; i ++ )
	{
		if( image[row] << i & 0b10000 )
		{
			setLed( i + row * 5 );
  84:	d4 2e       	mov	r13, r20
  86:	dd 0c       	add	r13, r13
  88:	dd 0c       	add	r13, r13
  8a:	d4 0e       	add	r13, r20
  8c:	c0 e0       	ldi	r28, 0x00	; 0
  8e:	d0 e0       	ldi	r29, 0x00	; 0
*/
void charliePlex::displayRow( uint8_t image[], uint8_t row )
{
	for( uint8_t i = 0; i < 5; i ++ )
	{
		if( image[row] << i & 0b10000 )
  90:	8b 01       	movw	r16, r22
  92:	04 0f       	add	r16, r20
  94:	11 1d       	adc	r17, r1
  96:	f8 01       	movw	r30, r16
  98:	20 81       	ld	r18, Z
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	0c 2e       	mov	r0, r28
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_ZN11charliePlex10displayRowEPhh+0x30>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <_ZN11charliePlex10displayRowEPhh+0x2c>
  a8:	24 ff       	sbrs	r18, 4
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <_ZN11charliePlex10displayRowEPhh+0x40>
  ac:	6c 2f       	mov	r22, r28
  ae:	6d 0d       	add	r22, r13
		{
			setLed( i + row * 5 );
  b0:	c7 01       	movw	r24, r14
  b2:	d1 df       	rcall	.-94     	; 0x56 <_ZN11charliePlex6setLedEh>
  b4:	21 96       	adiw	r28, 0x01	; 1
		image - a 4 element array containing binary values
		row - the row that image should be displayed in the matrix
*/
void charliePlex::displayRow( uint8_t image[], uint8_t row )
{
	for( uint8_t i = 0; i < 5; i ++ )
  b6:	c5 30       	cpi	r28, 0x05	; 5
  b8:	d1 05       	cpc	r29, r1
  ba:	69 f7       	brne	.-38     	; 0x96 <_ZN11charliePlex10displayRowEPhh+0x22>
		if( image[row] << i & 0b10000 )
		{
			setLed( i + row * 5 );
		}
	}
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	ff 90       	pop	r15
  c6:	ef 90       	pop	r14
  c8:	df 90       	pop	r13
  ca:	08 95       	ret

000000cc <_ZN11charliePlex12displayFrameEPh>:

	Inputs: 
		image - a 4 element array each with an 8 bit number in it that specifies a greyscale value
*/
void charliePlex::displayFrame( uint8_t image[] )
{
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	7c 01       	movw	r14, r24
  d8:	8b 01       	movw	r16, r22
  da:	c0 e0       	ldi	r28, 0x00	; 0
	for( int row = 0; row < 4; row ++ )
	{
		displayRow( image, row );
  dc:	4c 2f       	mov	r20, r28
  de:	b8 01       	movw	r22, r16
  e0:	c7 01       	movw	r24, r14
  e2:	c8 df       	rcall	.-112    	; 0x74 <_ZN11charliePlex10displayRowEPhh>
  e4:	cf 5f       	subi	r28, 0xFF	; 255
	Inputs: 
		image - a 4 element array each with an 8 bit number in it that specifies a greyscale value
*/
void charliePlex::displayFrame( uint8_t image[] )
{
	for( int row = 0; row < 4; row ++ )
  e6:	c4 30       	cpi	r28, 0x04	; 4
  e8:	c9 f7       	brne	.-14     	; 0xdc <_ZN11charliePlex12displayFrameEPh+0x10>
	{
		displayRow( image, row );
	}
}
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	ef 90       	pop	r14
  f4:	08 95       	ret

000000f6 <_ZN11charliePlex12shiftMessageEPyPhh>:
	Inputs:
		message -  The overall message that is to be displayed on the matrix
		frame - The resultant array containing 4 8-bit numbers
*/
void charliePlex::shiftMessage( uint64_t message[], uint8_t frame[], uint8_t pos )
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	12 2f       	mov	r17, r18
 100:	fb 01       	movw	r30, r22
 102:	a4 2f       	mov	r26, r20
 104:	b5 2f       	mov	r27, r21
 106:	eb 01       	movw	r28, r22
 108:	a0 96       	adiw	r28, 0x20	; 32
	for( uint8_t i = 0; i < 4; i ++ )
	{
		 frame[i] = message[i] >> pos;
 10a:	20 81       	ld	r18, Z
 10c:	31 81       	ldd	r19, Z+1	; 0x01
 10e:	42 81       	ldd	r20, Z+2	; 0x02
 110:	53 81       	ldd	r21, Z+3	; 0x03
 112:	64 81       	ldd	r22, Z+4	; 0x04
 114:	75 81       	ldd	r23, Z+5	; 0x05
 116:	86 81       	ldd	r24, Z+6	; 0x06
 118:	97 81       	ldd	r25, Z+7	; 0x07
 11a:	38 96       	adiw	r30, 0x08	; 8
 11c:	01 2f       	mov	r16, r17
 11e:	3f d0       	rcall	.+126    	; 0x19e <__lshrdi3>
 120:	2d 93       	st	X+, r18
		message -  The overall message that is to be displayed on the matrix
		frame - The resultant array containing 4 8-bit numbers
*/
void charliePlex::shiftMessage( uint64_t message[], uint8_t frame[], uint8_t pos )
{
	for( uint8_t i = 0; i < 4; i ++ )
 122:	ec 17       	cp	r30, r28
 124:	fd 07       	cpc	r31, r29
 126:	89 f7       	brne	.-30     	; 0x10a <_ZN11charliePlex12shiftMessageEPyPhh+0x14>
	{
		 frame[i] = message[i] >> pos;
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <main>:
int main(void)
{
		
	while(1) 
    {
		for( int j = 63; j >= -6; j -- )
 132:	d4 e6       	ldi	r29, 0x64	; 100
 134:	0f e3       	ldi	r16, 0x3F	; 63
 136:	10 e0       	ldi	r17, 0x00	; 0
		{
			if( j < 0 )
 138:	11 23       	and	r17, r17
 13a:	6c f4       	brge	.+26     	; 0x156 <main+0x24>
 13c:	2a e3       	ldi	r18, 0x3A	; 58
 13e:	20 0f       	add	r18, r16
			{
				mux.shiftMessage( message2, image, j + 58 );
 140:	49 ec       	ldi	r20, 0xC9	; 201
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	60 e6       	ldi	r22, 0x60	; 96
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	d4 df       	rcall	.-88     	; 0xf6 <_ZN11charliePlex12shiftMessageEPyPhh>
				mux.ledOff();							
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	8d df       	rcall	.-230    	; 0x6e <_ZN11charliePlex6ledOffEv>
 154:	20 c0       	rjmp	.+64     	; 0x196 <__stack+0x37>
			}
			
			else
			{
				mux.shiftMessage( message1, image, j );
 156:	20 2f       	mov	r18, r16
 158:	49 ec       	ldi	r20, 0xC9	; 201
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	60 e8       	ldi	r22, 0x80	; 128
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	c8 df       	rcall	.-112    	; 0xf6 <_ZN11charliePlex12shiftMessageEPyPhh>
				mux.ledOff();
 166:	88 ec       	ldi	r24, 0xC8	; 200
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	81 df       	rcall	.-254    	; 0x6e <_ZN11charliePlex6ledOffEv>
 16c:	14 c0       	rjmp	.+40     	; 0x196 <__stack+0x37>
			}
			
			for( uint8_t i = 0; i < 100; i ++  )
			{
				mux.displayFrame(image);
 16e:	69 ec       	ldi	r22, 0xC9	; 201
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	88 ec       	ldi	r24, 0xC8	; 200
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	aa df       	rcall	.-172    	; 0xcc <_ZN11charliePlex12displayFrameEPh>
				mux.ledOff();
 178:	88 ec       	ldi	r24, 0xC8	; 200
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	78 df       	rcall	.-272    	; 0x6e <_ZN11charliePlex6ledOffEv>
 17e:	c1 50       	subi	r28, 0x01	; 1
			{
				mux.shiftMessage( message1, image, j );
				mux.ledOff();
			}
			
			for( uint8_t i = 0; i < 100; i ++  )
 180:	b1 f7       	brne	.-20     	; 0x16e <__stack+0xf>
int main(void)
{
		
	while(1) 
    {
		for( int j = 63; j >= -6; j -- )
 182:	01 50       	subi	r16, 0x01	; 1
 184:	11 09       	sbc	r17, r1
 186:	09 3f       	cpi	r16, 0xF9	; 249
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	18 07       	cpc	r17, r24
 18c:	a9 f6       	brne	.-86     	; 0x138 <main+0x6>
			{
				mux.displayFrame(image);
				mux.ledOff();
			}
		}
		mux.ledOff();	
 18e:	88 ec       	ldi	r24, 0xC8	; 200
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	6d df       	rcall	.-294    	; 0x6e <_ZN11charliePlex6ledOffEv>
	}
 194:	cf cf       	rjmp	.-98     	; 0x134 <main+0x2>
int main(void)
{
		
	while(1) 
    {
		for( int j = 63; j >= -6; j -- )
 196:	cd 2f       	mov	r28, r29
 198:	ea cf       	rjmp	.-44     	; 0x16e <__stack+0xf>

0000019a <__ashrdi3>:
 19a:	97 fb       	bst	r25, 7
 19c:	10 f8       	bld	r1, 0

0000019e <__lshrdi3>:
 19e:	16 94       	lsr	r1
 1a0:	00 08       	sbc	r0, r0
 1a2:	0f 93       	push	r16
 1a4:	08 30       	cpi	r16, 0x08	; 8
 1a6:	98 f0       	brcs	.+38     	; 0x1ce <__lshrdi3+0x30>
 1a8:	08 50       	subi	r16, 0x08	; 8
 1aa:	23 2f       	mov	r18, r19
 1ac:	34 2f       	mov	r19, r20
 1ae:	45 2f       	mov	r20, r21
 1b0:	56 2f       	mov	r21, r22
 1b2:	67 2f       	mov	r22, r23
 1b4:	78 2f       	mov	r23, r24
 1b6:	89 2f       	mov	r24, r25
 1b8:	90 2d       	mov	r25, r0
 1ba:	f4 cf       	rjmp	.-24     	; 0x1a4 <__lshrdi3+0x6>
 1bc:	05 94       	asr	r0
 1be:	97 95       	ror	r25
 1c0:	87 95       	ror	r24
 1c2:	77 95       	ror	r23
 1c4:	67 95       	ror	r22
 1c6:	57 95       	ror	r21
 1c8:	47 95       	ror	r20
 1ca:	37 95       	ror	r19
 1cc:	27 95       	ror	r18
 1ce:	0a 95       	dec	r16
 1d0:	aa f7       	brpl	.-22     	; 0x1bc <__lshrdi3+0x1e>
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
